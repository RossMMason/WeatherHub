name: $(Date:yyyy).$(Date:MM).$(Date:dd).$(Rev:r) 
trigger:
  - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restoring nuget packages for solution'
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Run Build server tests'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--filter Category!=NotOnBuildServer'
    testRunTitle: 'Build server tests'

- task: Npm@1
  displayName: 'Running npm install on front end'
  inputs:
    command: 'install'
    workingDir: '$(Build.SourcesDirectory)/src/WeatherHub.FrontEnd'

- task: Npm@1
  displayName: 'Running npm publish on front end'
  inputs:
    command: 'custom'
    workingDir: '$(Build.SourcesDirectory)/src/WeatherHub.FrontEnd'
    customCommand: 'run publish'

- task: DotNetCoreCLI@2
  displayName: 'Publish front end to artifacts'
  inputs:
    command: 'publish'
    projects: '$(Build.SourcesDirectory)/src/WeatherHub.FrontEnd/WeatherHub.FrontEnd.csproj'
    publishWebProjects: false
    zipAfterPublish: true
    arguments: '-r win-x64 -p:Platform=x64 --output "$(build.artifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: 'Publish functions to artifacts'
  inputs:
    command: 'publish'
    projects: '$(Build.SourcesDirectory)/src/WeatherHub.Functions/WeatherHub.Functions.csproj'
    publishWebProjects: false
    zipAfterPublish: true
    arguments: '-r win-x64 -p:Platform=x64 --output "$(build.artifactStagingDirectory)"'

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'