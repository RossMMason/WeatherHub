// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherHub.Domain.Migrations;

namespace WeatherHub.Domain.Migrations.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    partial class MigrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherHub.Domain.Entities.FetcherSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<Guid?>("StationId");

                    b.Property<string>("Value")
                        .HasMaxLength(500);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StationId", "Key")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("FetcherSetting");
                });

            modelBuilder.Entity("WeatherHub.Domain.Entities.StationDayStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<float>("DewpointHighC");

                    b.Property<TimeSpan>("DewpointHighTime");

                    b.Property<float>("DewpointLowC");

                    b.Property<TimeSpan>("DewpointLowTime");

                    b.Property<float>("HeatIndexHighC");

                    b.Property<TimeSpan>("HeatIndexHighTime");

                    b.Property<float>("HeatIndexLowC");

                    b.Property<TimeSpan>("HeatIndexLowTime");

                    b.Property<float>("PressureHighC");

                    b.Property<TimeSpan>("PressureHighTime");

                    b.Property<float>("PressureLowC");

                    b.Property<TimeSpan>("PressureLowTime");

                    b.Property<float>("RainRateHighCmPerHour");

                    b.Property<float>("RelativeHumidityHigh");

                    b.Property<float>("RelativeHumidityLow");

                    b.Property<TimeSpan>("RelativeHumidyHighTime");

                    b.Property<TimeSpan>("RelativeHumidyLowTime");

                    b.Property<Guid?>("StationId");

                    b.Property<float>("TempHighC");

                    b.Property<TimeSpan>("TempHighTime");

                    b.Property<float>("TempLowC");

                    b.Property<TimeSpan>("TempLowTime");

                    b.Property<decimal>("TotalRainCm");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<TimeSpan>("WidHighTime");

                    b.Property<float>("WindChillLow");

                    b.Property<TimeSpan>("WindChillLowTime");

                    b.Property<float>("WindHighMph");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StationId", "Date")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("StationDayStatistics");
                });

            modelBuilder.Entity("WeatherHub.Domain.Entities.StationReading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("DewpointC");

                    b.Property<float>("HeatIndexC");

                    b.Property<float>("PressureMb");

                    b.Property<float>("RainCmPerHour");

                    b.Property<float>("RelativeHuimidity");

                    b.Property<Guid?>("StationId");

                    b.Property<float>("TempC");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("When");

                    b.Property<float>("WindChillC");

                    b.Property<float>("WindDegrees");

                    b.Property<float>("WindGustMph");

                    b.Property<float>("WindMph");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StationId", "When")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("StationReading");
                });

            modelBuilder.Entity("WeatherHub.Domain.Entities.WeatherStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AltitudeM");

                    b.Property<string>("FetcherType")
                        .HasMaxLength(100);

                    b.Property<float>("Latitudue");

                    b.Property<string>("LocationDescriptionHtml")
                        .HasMaxLength(999999);

                    b.Property<float>("Longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("StationContact")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("WeatherStation");
                });

            modelBuilder.Entity("WeatherHub.Domain.Entities.FetcherSetting", b =>
                {
                    b.HasOne("WeatherHub.Domain.Entities.WeatherStation", "Station")
                        .WithMany("FetcherSettings")
                        .HasForeignKey("StationId");
                });

            modelBuilder.Entity("WeatherHub.Domain.Entities.StationDayStatistics", b =>
                {
                    b.HasOne("WeatherHub.Domain.Entities.WeatherStation", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");
                });

            modelBuilder.Entity("WeatherHub.Domain.Entities.StationReading", b =>
                {
                    b.HasOne("WeatherHub.Domain.Entities.WeatherStation", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");
                });
#pragma warning restore 612, 618
        }
    }
}
